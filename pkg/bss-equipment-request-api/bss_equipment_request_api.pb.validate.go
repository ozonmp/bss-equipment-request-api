// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/bss_equipment_request_api/v1/bss_equipment_request_api.proto

package bss_equipment_request_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on EquipmentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EquipmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for EmployeeId

	// no validation rules for EquipmentId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDoneAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestValidationError{
				field:  "DoneAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EquipmentRequestStatus

	return nil
}

// EquipmentRequestValidationError is the validation error returned by
// EquipmentRequest.Validate if the designated constraints aren't met.
type EquipmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentRequestValidationError) ErrorName() string { return "EquipmentRequestValidationError" }

// Error satisfies the builtin error interface
func (e EquipmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentRequestValidationError{}

// Validate checks the field values on DescribeEquipmentRequestV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DescribeEquipmentRequestV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEquipmentRequestId() <= 0 {
		return DescribeEquipmentRequestV1RequestValidationError{
			field:  "EquipmentRequestId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeEquipmentRequestV1RequestValidationError is the validation error
// returned by DescribeEquipmentRequestV1Request.Validate if the designated
// constraints aren't met.
type DescribeEquipmentRequestV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeEquipmentRequestV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeEquipmentRequestV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeEquipmentRequestV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeEquipmentRequestV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeEquipmentRequestV1RequestValidationError) ErrorName() string {
	return "DescribeEquipmentRequestV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeEquipmentRequestV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeEquipmentRequestV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeEquipmentRequestV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeEquipmentRequestV1RequestValidationError{}

// Validate checks the field values on DescribeEquipmentRequestV1Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DescribeEquipmentRequestV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEquipmentRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeEquipmentRequestV1ResponseValidationError{
				field:  "EquipmentRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeEquipmentRequestV1ResponseValidationError is the validation error
// returned by DescribeEquipmentRequestV1Response.Validate if the designated
// constraints aren't met.
type DescribeEquipmentRequestV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeEquipmentRequestV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeEquipmentRequestV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeEquipmentRequestV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeEquipmentRequestV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeEquipmentRequestV1ResponseValidationError) ErrorName() string {
	return "DescribeEquipmentRequestV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeEquipmentRequestV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeEquipmentRequestV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeEquipmentRequestV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeEquipmentRequestV1ResponseValidationError{}

// Validate checks the field values on CreateEquipmentRequestV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEquipmentRequestV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEmployeeId() <= 0 {
		return CreateEquipmentRequestV1RequestValidationError{
			field:  "EmployeeId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetEquipmentId() <= 0 {
		return CreateEquipmentRequestV1RequestValidationError{
			field:  "EquipmentId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetCreatedAt() == nil {
		return CreateEquipmentRequestV1RequestValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEquipmentRequestV1RequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEquipmentRequestV1RequestValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDoneAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEquipmentRequestV1RequestValidationError{
				field:  "DoneAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := EquipmentRequestStatus_name[int32(m.GetEquipmentRequestStatus())]; !ok {
		return CreateEquipmentRequestV1RequestValidationError{
			field:  "EquipmentRequestStatus",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// CreateEquipmentRequestV1RequestValidationError is the validation error
// returned by CreateEquipmentRequestV1Request.Validate if the designated
// constraints aren't met.
type CreateEquipmentRequestV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEquipmentRequestV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEquipmentRequestV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEquipmentRequestV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEquipmentRequestV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEquipmentRequestV1RequestValidationError) ErrorName() string {
	return "CreateEquipmentRequestV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEquipmentRequestV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEquipmentRequestV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEquipmentRequestV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEquipmentRequestV1RequestValidationError{}

// Validate checks the field values on CreateEquipmentRequestV1Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateEquipmentRequestV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EquipmentRequestId

	return nil
}

// CreateEquipmentRequestV1ResponseValidationError is the validation error
// returned by CreateEquipmentRequestV1Response.Validate if the designated
// constraints aren't met.
type CreateEquipmentRequestV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEquipmentRequestV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEquipmentRequestV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEquipmentRequestV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEquipmentRequestV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEquipmentRequestV1ResponseValidationError) ErrorName() string {
	return "CreateEquipmentRequestV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEquipmentRequestV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEquipmentRequestV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEquipmentRequestV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEquipmentRequestV1ResponseValidationError{}

// Validate checks the field values on ListEquipmentRequestV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentRequestV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() <= 0 {
		return ListEquipmentRequestV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	if _, ok := _ListEquipmentRequestV1Request_Offset_InLookup[m.GetOffset()]; !ok {
		return ListEquipmentRequestV1RequestValidationError{
			field:  "Offset",
			reason: "value must be in list [5 20 50 100 200]",
		}
	}

	return nil
}

// ListEquipmentRequestV1RequestValidationError is the validation error
// returned by ListEquipmentRequestV1Request.Validate if the designated
// constraints aren't met.
type ListEquipmentRequestV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentRequestV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentRequestV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentRequestV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentRequestV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentRequestV1RequestValidationError) ErrorName() string {
	return "ListEquipmentRequestV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentRequestV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentRequestV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentRequestV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentRequestV1RequestValidationError{}

var _ListEquipmentRequestV1Request_Offset_InLookup = map[uint64]struct{}{
	5:   {},
	20:  {},
	50:  {},
	100: {},
	200: {},
}

// Validate checks the field values on ListEquipmentRequestV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEquipmentRequestV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEquipmentRequestV1ResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEquipmentRequestV1ResponseValidationError is the validation error
// returned by ListEquipmentRequestV1Response.Validate if the designated
// constraints aren't met.
type ListEquipmentRequestV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEquipmentRequestV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEquipmentRequestV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEquipmentRequestV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEquipmentRequestV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEquipmentRequestV1ResponseValidationError) ErrorName() string {
	return "ListEquipmentRequestV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEquipmentRequestV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEquipmentRequestV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEquipmentRequestV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEquipmentRequestV1ResponseValidationError{}

// Validate checks the field values on RemoveEquipmentRequestV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveEquipmentRequestV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEquipmentRequestId() <= 0 {
		return RemoveEquipmentRequestV1RequestValidationError{
			field:  "EquipmentRequestId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveEquipmentRequestV1RequestValidationError is the validation error
// returned by RemoveEquipmentRequestV1Request.Validate if the designated
// constraints aren't met.
type RemoveEquipmentRequestV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveEquipmentRequestV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveEquipmentRequestV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveEquipmentRequestV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveEquipmentRequestV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveEquipmentRequestV1RequestValidationError) ErrorName() string {
	return "RemoveEquipmentRequestV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveEquipmentRequestV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveEquipmentRequestV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveEquipmentRequestV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveEquipmentRequestV1RequestValidationError{}

// Validate checks the field values on RemoveEquipmentRequestV1Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveEquipmentRequestV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Removed

	return nil
}

// RemoveEquipmentRequestV1ResponseValidationError is the validation error
// returned by RemoveEquipmentRequestV1Response.Validate if the designated
// constraints aren't met.
type RemoveEquipmentRequestV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveEquipmentRequestV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveEquipmentRequestV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveEquipmentRequestV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveEquipmentRequestV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveEquipmentRequestV1ResponseValidationError) ErrorName() string {
	return "RemoveEquipmentRequestV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveEquipmentRequestV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveEquipmentRequestV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveEquipmentRequestV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveEquipmentRequestV1ResponseValidationError{}

// Validate checks the field values on
// UpdateEquipmentIDEquipmentRequestV1Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateEquipmentIDEquipmentRequestV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEquipmentRequestId() <= 0 {
		return UpdateEquipmentIDEquipmentRequestV1RequestValidationError{
			field:  "EquipmentRequestId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetEquipmentId() <= 0 {
		return UpdateEquipmentIDEquipmentRequestV1RequestValidationError{
			field:  "EquipmentId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// UpdateEquipmentIDEquipmentRequestV1RequestValidationError is the validation
// error returned by UpdateEquipmentIDEquipmentRequestV1Request.Validate if
// the designated constraints aren't met.
type UpdateEquipmentIDEquipmentRequestV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEquipmentIDEquipmentRequestV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEquipmentIDEquipmentRequestV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEquipmentIDEquipmentRequestV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEquipmentIDEquipmentRequestV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEquipmentIDEquipmentRequestV1RequestValidationError) ErrorName() string {
	return "UpdateEquipmentIDEquipmentRequestV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEquipmentIDEquipmentRequestV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEquipmentIDEquipmentRequestV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEquipmentIDEquipmentRequestV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEquipmentIDEquipmentRequestV1RequestValidationError{}

// Validate checks the field values on
// UpdateEquipmentIDEquipmentRequestV1Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateEquipmentIDEquipmentRequestV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Updated

	return nil
}

// UpdateEquipmentIDEquipmentRequestV1ResponseValidationError is the validation
// error returned by UpdateEquipmentIDEquipmentRequestV1Response.Validate if
// the designated constraints aren't met.
type UpdateEquipmentIDEquipmentRequestV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEquipmentIDEquipmentRequestV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEquipmentIDEquipmentRequestV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEquipmentIDEquipmentRequestV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEquipmentIDEquipmentRequestV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEquipmentIDEquipmentRequestV1ResponseValidationError) ErrorName() string {
	return "UpdateEquipmentIDEquipmentRequestV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEquipmentIDEquipmentRequestV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEquipmentIDEquipmentRequestV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEquipmentIDEquipmentRequestV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEquipmentIDEquipmentRequestV1ResponseValidationError{}

// Validate checks the field values on UpdateStatusEquipmentRequestV1Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateStatusEquipmentRequestV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEquipmentRequestId() <= 0 {
		return UpdateStatusEquipmentRequestV1RequestValidationError{
			field:  "EquipmentRequestId",
			reason: "value must be greater than 0",
		}
	}

	if _, ok := EquipmentRequestStatus_name[int32(m.GetEquipmentRequestStatus())]; !ok {
		return UpdateStatusEquipmentRequestV1RequestValidationError{
			field:  "EquipmentRequestStatus",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// UpdateStatusEquipmentRequestV1RequestValidationError is the validation error
// returned by UpdateStatusEquipmentRequestV1Request.Validate if the
// designated constraints aren't met.
type UpdateStatusEquipmentRequestV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusEquipmentRequestV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusEquipmentRequestV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusEquipmentRequestV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusEquipmentRequestV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusEquipmentRequestV1RequestValidationError) ErrorName() string {
	return "UpdateStatusEquipmentRequestV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusEquipmentRequestV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusEquipmentRequestV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusEquipmentRequestV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusEquipmentRequestV1RequestValidationError{}

// Validate checks the field values on UpdateStatusEquipmentRequestV1Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateStatusEquipmentRequestV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Updated

	return nil
}

// UpdateStatusEquipmentRequestV1ResponseValidationError is the validation
// error returned by UpdateStatusEquipmentRequestV1Response.Validate if the
// designated constraints aren't met.
type UpdateStatusEquipmentRequestV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusEquipmentRequestV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusEquipmentRequestV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusEquipmentRequestV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusEquipmentRequestV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusEquipmentRequestV1ResponseValidationError) ErrorName() string {
	return "UpdateStatusEquipmentRequestV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusEquipmentRequestV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusEquipmentRequestV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusEquipmentRequestV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusEquipmentRequestV1ResponseValidationError{}

// Validate checks the field values on EquipmentRequestPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentRequestPayload) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for EmployeeId

	// no validation rules for EquipmentId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestPayloadValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestPayloadValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestPayloadValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDoneAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestPayloadValidationError{
				field:  "DoneAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EquipmentRequestStatus

	return nil
}

// EquipmentRequestPayloadValidationError is the validation error returned by
// EquipmentRequestPayload.Validate if the designated constraints aren't met.
type EquipmentRequestPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentRequestPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentRequestPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentRequestPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentRequestPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentRequestPayloadValidationError) ErrorName() string {
	return "EquipmentRequestPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentRequestPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentRequestPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentRequestPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentRequestPayloadValidationError{}

// Validate checks the field values on EquipmentRequestEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EquipmentRequestEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for EquipmentRequestId

	// no validation rules for Type

	// no validation rules for Status

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestEventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestEventValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EquipmentRequestEventValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EquipmentRequestEventValidationError is the validation error returned by
// EquipmentRequestEvent.Validate if the designated constraints aren't met.
type EquipmentRequestEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EquipmentRequestEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EquipmentRequestEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EquipmentRequestEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EquipmentRequestEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EquipmentRequestEventValidationError) ErrorName() string {
	return "EquipmentRequestEventValidationError"
}

// Error satisfies the builtin error interface
func (e EquipmentRequestEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEquipmentRequestEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EquipmentRequestEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EquipmentRequestEventValidationError{}
