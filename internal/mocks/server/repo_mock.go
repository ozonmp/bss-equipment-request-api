// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/bss-equipment-request-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ozonmp/bss-equipment-request-api/internal/model"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateEquipmentRequest mocks base method.
func (m *MockRepo) CreateEquipmentRequest(arg0 context.Context, arg1 *model.EquipmentRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEquipmentRequest", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEquipmentRequest indicates an expected call of CreateEquipmentRequest.
func (mr *MockRepoMockRecorder) CreateEquipmentRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEquipmentRequest", reflect.TypeOf((*MockRepo)(nil).CreateEquipmentRequest), arg0, arg1)
}

// DescribeEquipmentRequest mocks base method.
func (m *MockRepo) DescribeEquipmentRequest(arg0 context.Context, arg1 uint64) (*model.EquipmentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEquipmentRequest", arg0, arg1)
	ret0, _ := ret[0].(*model.EquipmentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEquipmentRequest indicates an expected call of DescribeEquipmentRequest.
func (mr *MockRepoMockRecorder) DescribeEquipmentRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEquipmentRequest", reflect.TypeOf((*MockRepo)(nil).DescribeEquipmentRequest), arg0, arg1)
}

// Exists mocks base method.
func (m *MockRepo) Exists(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRepoMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRepo)(nil).Exists), arg0, arg1)
}

// ListEquipmentRequest mocks base method.
func (m *MockRepo) ListEquipmentRequest(arg0 context.Context) ([]model.EquipmentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentRequest", arg0)
	ret0, _ := ret[0].([]model.EquipmentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentRequest indicates an expected call of ListEquipmentRequest.
func (mr *MockRepoMockRecorder) ListEquipmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentRequest", reflect.TypeOf((*MockRepo)(nil).ListEquipmentRequest), arg0)
}

// RemoveEquipmentRequest mocks base method.
func (m *MockRepo) RemoveEquipmentRequest(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEquipmentRequest", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEquipmentRequest indicates an expected call of RemoveEquipmentRequest.
func (mr *MockRepoMockRecorder) RemoveEquipmentRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEquipmentRequest", reflect.TypeOf((*MockRepo)(nil).RemoveEquipmentRequest), arg0, arg1)
}
