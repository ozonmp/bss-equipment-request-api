// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonmp/bss-equipment-request-api/internal/repo (interfaces: EquipmentRequestRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	model "github.com/ozonmp/bss-equipment-request-api/internal/model"
)

// MockEquipmentRequestRepo is a mock of EquipmentRequestRepo interface.
type MockEquipmentRequestRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEquipmentRequestRepoMockRecorder
}

// MockEquipmentRequestRepoMockRecorder is the mock recorder for MockEquipmentRequestRepo.
type MockEquipmentRequestRepoMockRecorder struct {
	mock *MockEquipmentRequestRepo
}

// NewMockEquipmentRequestRepo creates a new mock instance.
func NewMockEquipmentRequestRepo(ctrl *gomock.Controller) *MockEquipmentRequestRepo {
	mock := &MockEquipmentRequestRepo{ctrl: ctrl}
	mock.recorder = &MockEquipmentRequestRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEquipmentRequestRepo) EXPECT() *MockEquipmentRequestRepoMockRecorder {
	return m.recorder
}

// CreateEquipmentRequest mocks base method.
func (m *MockEquipmentRequestRepo) CreateEquipmentRequest(arg0 context.Context, arg1 *model.EquipmentRequest, arg2 *sqlx.Tx) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEquipmentRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEquipmentRequest indicates an expected call of CreateEquipmentRequest.
func (mr *MockEquipmentRequestRepoMockRecorder) CreateEquipmentRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEquipmentRequest", reflect.TypeOf((*MockEquipmentRequestRepo)(nil).CreateEquipmentRequest), arg0, arg1, arg2)
}

// DescribeEquipmentRequest mocks base method.
func (m *MockEquipmentRequestRepo) DescribeEquipmentRequest(arg0 context.Context, arg1 uint64) (*model.EquipmentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEquipmentRequest", arg0, arg1)
	ret0, _ := ret[0].(*model.EquipmentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEquipmentRequest indicates an expected call of DescribeEquipmentRequest.
func (mr *MockEquipmentRequestRepoMockRecorder) DescribeEquipmentRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEquipmentRequest", reflect.TypeOf((*MockEquipmentRequestRepo)(nil).DescribeEquipmentRequest), arg0, arg1)
}

// Exists mocks base method.
func (m *MockEquipmentRequestRepo) Exists(arg0 context.Context, arg1 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockEquipmentRequestRepoMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockEquipmentRequestRepo)(nil).Exists), arg0, arg1)
}

// ListEquipmentRequest mocks base method.
func (m *MockEquipmentRequestRepo) ListEquipmentRequest(arg0 context.Context, arg1, arg2 uint64) ([]model.EquipmentRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEquipmentRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.EquipmentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEquipmentRequest indicates an expected call of ListEquipmentRequest.
func (mr *MockEquipmentRequestRepoMockRecorder) ListEquipmentRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEquipmentRequest", reflect.TypeOf((*MockEquipmentRequestRepo)(nil).ListEquipmentRequest), arg0, arg1, arg2)
}

// RemoveEquipmentRequest mocks base method.
func (m *MockEquipmentRequestRepo) RemoveEquipmentRequest(arg0 context.Context, arg1 uint64, arg2 *sqlx.Tx) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEquipmentRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEquipmentRequest indicates an expected call of RemoveEquipmentRequest.
func (mr *MockEquipmentRequestRepoMockRecorder) RemoveEquipmentRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEquipmentRequest", reflect.TypeOf((*MockEquipmentRequestRepo)(nil).RemoveEquipmentRequest), arg0, arg1, arg2)
}

// UpdateEquipmentIdEquipmentRequest mocks base method.
func (m *MockEquipmentRequestRepo) UpdateEquipmentIdEquipmentRequest(arg0 context.Context, arg1, arg2 uint64, arg3 *sqlx.Tx) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEquipmentIdEquipmentRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEquipmentIdEquipmentRequest indicates an expected call of UpdateEquipmentIdEquipmentRequest.
func (mr *MockEquipmentRequestRepoMockRecorder) UpdateEquipmentIdEquipmentRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEquipmentIdEquipmentRequest", reflect.TypeOf((*MockEquipmentRequestRepo)(nil).UpdateEquipmentIdEquipmentRequest), arg0, arg1, arg2, arg3)
}

// UpdateStatusEquipmentRequest mocks base method.
func (m *MockEquipmentRequestRepo) UpdateStatusEquipmentRequest(arg0 context.Context, arg1 uint64, arg2 model.EquipmentRequestStatus, arg3 *sqlx.Tx) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusEquipmentRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusEquipmentRequest indicates an expected call of UpdateStatusEquipmentRequest.
func (mr *MockEquipmentRequestRepoMockRecorder) UpdateStatusEquipmentRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusEquipmentRequest", reflect.TypeOf((*MockEquipmentRequestRepo)(nil).UpdateStatusEquipmentRequest), arg0, arg1, arg2, arg3)
}
